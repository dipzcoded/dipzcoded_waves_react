[{"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\index.js":"1","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\App.js":"2","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Song.js":"3","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Player.js":"4","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\data.js":"5","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Library.js":"6","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\LibrarySong.js":"7","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Nav.js":"8"},{"size":219,"mtime":1608998052398,"results":"9","hashOfConfig":"10"},{"size":2044,"mtime":1609191772814,"results":"11","hashOfConfig":"10"},{"size":382,"mtime":1609083391553,"results":"12","hashOfConfig":"10"},{"size":5036,"mtime":1609192944732,"results":"13","hashOfConfig":"10"},{"size":2825,"mtime":1609112642203,"results":"14","hashOfConfig":"10"},{"size":701,"mtime":1609114764790,"results":"15","hashOfConfig":"10"},{"size":1542,"mtime":1609189318289,"results":"16","hashOfConfig":"10"},{"size":417,"mtime":1609115112415,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"bgoo66",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\index.js",[],["36","37"],"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\App.js",[],"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Song.js",[],"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Player.js",["38"],"import React, { useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faPause,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({\r\n  currentSong,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  audioPlayer,\r\n  songInfo,\r\n  setSongInfo,\r\n  songs,\r\n  setCurrentSong,\r\n  setSongs,\r\n}) => {\r\n  const { currentTime, duration, animationPercent } = songInfo;\r\n  const activeLibraryHandle = (nextprev) => {\r\n    const newSongs = songs.map((el, index) => {\r\n      if (el.id === nextprev.id) {\r\n        return {\r\n          ...el,\r\n          active: true,\r\n        };\r\n      } else {\r\n        return {\r\n          ...el,\r\n          active: false,\r\n        };\r\n      }\r\n    });\r\n    setSongs(newSongs);\r\n  };\r\n  // useEffect(() => {\r\n  //   const newSongs = songs.map((el, index) => {\r\n  //     if (el.id === currentSong.id) {\r\n  //       return {\r\n  //         ...el,\r\n  //         active: true,\r\n  //       };\r\n  //     } else {\r\n  //       return {\r\n  //         ...el,\r\n  //         active: false,\r\n  //       };\r\n  //     }\r\n  //   });\r\n  //   setSongs(newSongs);\r\n  // }, [currentSong]);\r\n\r\n  useEffect(() => {\r\n    const index = songs.findIndex((el) => el.id === currentSong.id);\r\n    if (currentTime === duration && duration) {\r\n      if (index === songs.length - 1) {\r\n        setCurrentSong(songs[0]);\r\n        setIsPlaying(false);\r\n      } else {\r\n        setCurrentSong(songs[index + 1]);\r\n      }\r\n    } else {\r\n      if (index !== 0) {\r\n        if (isPlaying) {\r\n          setIsPlaying(false);\r\n          const playPromise = audioPlayer.current.play();\r\n          if (playPromise !== undefined) {\r\n            playPromise.then((play) => audioPlayer.current.play());\r\n          }\r\n          setIsPlaying(true);\r\n        }\r\n      }\r\n    }\r\n  }, [currentTime, duration]);\r\n\r\n  const onPlay = () => {\r\n    audioPlayer.current.play();\r\n    if (!isPlaying) {\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n  const onPause = () => {\r\n    audioPlayer.current.pause();\r\n    if (isPlaying) {\r\n      setIsPlaying(false);\r\n    }\r\n  };\r\n\r\n  const formatTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n\r\n  const dragHandler = (e) => {\r\n    audioPlayer.current.currentTime = e.target.value;\r\n    setSongInfo({\r\n      ...songInfo,\r\n      currentTime: e.target.value,\r\n    });\r\n  };\r\n\r\n  const skipTrackHandler = (direction) => {\r\n    let currentIndex = songs.findIndex((el) => el.id === currentSong.id);\r\n    if (direction === \"skip-back\") {\r\n      if (currentTime > 4 || currentTime === duration) {\r\n        audioPlayer.current.currentTime = 0;\r\n      } else {\r\n        if (currentIndex === 0) {\r\n          // todo some time\r\n          currentIndex = songs.length - 1;\r\n        } else {\r\n          currentIndex = currentIndex - 1;\r\n        }\r\n      }\r\n    } else if (direction === \"skip-forward\") {\r\n      if (currentIndex === songs.length - 1) {\r\n        currentIndex = 0;\r\n      } else {\r\n        currentIndex = currentIndex + 1;\r\n      }\r\n    }\r\n    activeLibraryHandle(songs[currentIndex]);\r\n    setCurrentSong(songs[currentIndex]);\r\n\r\n    if (isPlaying) {\r\n      setIsPlaying(false);\r\n      const playPromise = audioPlayer.current.play();\r\n      if (playPromise !== undefined) {\r\n        playPromise.then((play) => audioPlayer.current.play());\r\n      }\r\n      setIsPlaying(true);\r\n    }\r\n  };\r\n\r\n  const trackAnim = {\r\n    transform: `translateX(${animationPercent}%)`,\r\n  };\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{formatTime(currentTime)}</p>\r\n        <div\r\n          style={{\r\n            background: `linear-gradient(to right,transparent,${currentSong.color[0]},${currentSong.color[1]},transparent`,\r\n          }}\r\n          className=\"track\"\r\n        >\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={duration || 0}\r\n            value={currentTime}\r\n            onChange={dragHandler}\r\n          />\r\n          <div style={trackAnim} className=\"animate-track\"></div>\r\n        </div>\r\n\r\n        <p>{duration ? formatTime(duration) : \"0:00\"}</p>\r\n      </div>\r\n      <div className=\"play-control\">\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-back\")}\r\n          className=\"skip-back\"\r\n          size=\"2x\"\r\n          icon={faAngleLeft}\r\n        />\r\n        {isPlaying ? (\r\n          <FontAwesomeIcon\r\n            className=\"play\"\r\n            size=\"2x\"\r\n            icon={faPause}\r\n            onClick={onPause}\r\n          />\r\n        ) : (\r\n          <FontAwesomeIcon\r\n            className=\"play\"\r\n            size=\"2x\"\r\n            icon={faPlay}\r\n            onClick={onPlay}\r\n          />\r\n        )}\r\n\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-forward\")}\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleRight}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\data.js",[],"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Library.js",[],"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\LibrarySong.js",[],"C:\\Users\\hp\\Documents\\learning\\programming\\front-end dev\\projects\\waves-react\\src\\component\\Nav.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":76,"column":6,"nodeType":"45","endLine":76,"endColumn":29,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'audioPlayer', 'currentSong.id', 'isPlaying', 'setCurrentSong', 'setIsPlaying', and 'songs'. Either include them or remove the dependency array. If 'setCurrentSong' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [audioPlayer, currentSong.id, currentTime, duration, isPlaying, setCurrentSong, setIsPlaying, songs]",{"range":"52","text":"53"},[1841,1864],"[audioPlayer, currentSong.id, currentTime, duration, isPlaying, setCurrentSong, setIsPlaying, songs]"]